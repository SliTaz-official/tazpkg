#!/bin/sh
# TazPkg - Tiny autonomous zone packages manager, hg.slitaz.org/tazpkg
# upgrade - TazPkg module
# Check for upgrades and make system up-to-date


# Environment variables:
#   root							Root of the packages DB
#   check							Only check for upgrades
#   install							Check and install all upgraded packages


# Connect function libraries
. /lib/libtaz.sh

# Get TazPkg working environment
. @@MODULES@@/getenv




# Functions
# ---------

# Get repositories priority using $PKGS_DB/priority.
# In this file undigest repos are called by their names and main mirror
# by 'main'. Sort order: priority

look_for_priority() {
	[ -s "$PKGS_DB/priority" ] && priority=$(cat "$PKGS_DB/priority")

	for rep in main $(ls "$PKGS_DB/undigest" 2>/dev/null); do
		if [ ! -s "$PKGS_DB/priority" ] || ! grep -q "^$rep$" "$PKGS_DB/priority"; then
			priority=$(echo -e "$priority\n$rep")
		fi
	done

	priority=$(echo "$priority" | sed '/^$/d' | \
		while read line; do
		case $line in
			(main) echo "$PKGS_DB";;
			(*)    echo "$PKGS_DB/undigest/$line";;
		esac
	done)
}




time="$(date +%s)"

# Recharge packages databases (if necessary) (respects already exported "root" value)
tazpkg recharge >&2

echo -n > "$UP_LIST"
blocked_counter=$(mktemp)
tmp_up_list=$(mktemp)

look_for_priority
repo_number=1
for repo in $priority; do
	if [ "$repo" == "$PKGS_DB" ]; then
		repo_name='Main'
	else
		repo_name="$(basename "$repo")"
	fi

	[ ! -f "$repo/packages.info" ] && continue
	{
		cat "$BLOCKED" | awk '{printf "%s\t%s\n", $1, "b"}'
		cat "$PKGS_DB/installed.info" | awk -F$'\t' '{printf "%s\t%s\t%s\t%s\n", $1, "i", $2, $9}'
		cat "$repo/packages.info" | awk -F$'\t' '{printf "%s\t%s\t%s\t%s\n", $1, "p", $2, $9}'
	} | sort -t$'\t' -k1,1 | awk -F$'\t' \
	-vnewbuild="$(_ 'New build')" -vcolornewbuild="$(emsg '<c 34>')" \
	-vnewver='â†’ ' -vcolornewver="$(emsg '<c 32>')" \
	-vblocked=" ($(_ 'Blocked'))" -vcolorblocked="$(emsg '<c 31>')" \
	-vcolor0="$(emsg '</c>')" \
	-vreponum="$repo_number" -vreponame="$repo_name" \
	-vuplist="$UP_LIST" -vblocked_counter="$blocked_counter" \
'{

	if ($1 != p) {
		if (vi && vp) {
			bb = (b=="") ? "i" : "b"
			if ("" vi != vp) { # important: compare as strings
				startc = (b=="") ? colornewver : colorblocked;
				printf "%s\t%s\t%s\t%s\t", p, vi, reponum, reponame;
				printf "%s%s%s%s%s\t%s\n", startc, newver, vp, b, color0, bb;
				if (b=="")
					print p >> uplist;
				else
					printf 1 >> blocked_counter;
			} else if (mi != mp) {
				startc = (b=="") ? colornewbuild : colorblocked;
				printf "%s\t%s\t%s\t%s\t", p, vi, reponum, reponame;
				printf "%s%s%s%s\t%s\n",   startc, newbuild, b, color0, bb;
				if (b=="")
					print p >> uplist;
				else
					printf 1 >> blocked_counter;
			}
		}
		p = $1; b = b1 = b2 = vi = mi = vp = mp = "";
	}
	if ($2 == "b") { b = blocked; b1 = bl1; b2 = bl2; }
	if ($2 == "i") { vi = $3; mi = $4; }
	if ($2 == "p") { vp = $3; mp = $4; }
}' >> "$tmp_up_list"

	repo_number=$((repo_number + 1))

done

case "$output" in
	html)
		cat <<EOT
<table class="wide zebra">
	<thead>
		<tr><td>$(_ 'Package')</td><td>$(_ 'Repository')</td><td>$(_ 'Version')</td><td>$(_ 'Status')</td></tr>
	</thead>
	<tbody>
EOT
		sort -t$'\t' -k1,3 "$tmp_up_list" | awk -F$'\t' '{
			if($4=="Main"){repo_icon="slitaz"}else{repo_icon="web"}
			if($6=="b"){data_icon="pkgib"}else{data_icon="pkgi"}

			printf "<tr><td><input type=\"checkbox\" name=\"pkg\" value=\"%s\"/>", $1;
			printf "<a data-icon=\"%s\" href=\"?info=%s\">%s</a></td>", data_icon, $1, $1;
			printf "<td><span data-icon=\"%s\">%s</span></td>", repo_icon, $4;
			printf "<td>%s</td>", $2;
			printf "<td>%s</td></tr>\n", $5;
			}'
		echo '</tbody></table>' ;;
	*)
		emsg "<n>$(_ 'Package')<i 26>$(_ 'Repository')<i 38>$(_ 'Version')<i 49>$(_ 'Status')<->"
		sort -t$'\t' -k1,3 "$tmp_up_list" | awk -F$'\t' \
			'{printf "%-24s %-11s %-10s %s\n", $1, $4, $2, $5}';;
esac

sed -i /^$/d "$UP_LIST"
upnb=$(wc -l < "$UP_LIST")
pkgs=$(wc -l < "$PKGS_DB/installed.info")
time=$(($(date +%s) - $time))
if [ "$upnb" -eq 0 ]; then
	install="n"
	_ 'System is up-to-date...'
else
	blocked_count=$(wc -m < "$blocked_counter")

	blocked=$(_p \
		'%s blocked' \
		'%s blocked' "$blocked_count" \
		"$blocked_count")

	footer "$(_p \
		'You have %s available upgrade (%s)' \
		'You have %s available upgrades (%s)' "$upnb" \
		"$upnb" "$blocked")"
fi
emsg "$(_p \
	'%s installed package scanned in %ds' \
	'%s installed packages scanned in %ds' "$pkgs" \
	"<c 32>$pkgs</c>" "$time")"


# Clean
rm "$blocked_counter" "$tmp_up_list"

# Pkgs to upgrade ? Skip, let install them all, or ask user
[ -n "$check" ] && exit 0

if [ "$upnb" -gt 0 ]; then
	if [ -n "$install" ]; then
		answer=0
	else
		confirm "$(_ 'Do you wish to install them now? (y/N)')"
		answer=$?
	fi
	case "$answer" in
		0)
			for pkg in $(cat "$UP_LIST"); do
				echo 'y' | tazpkg -gi "$pkg" --forced		#--reason="upgrade"
			done
			# List is generated each time and must be cleaned so
			# tazpkg-notify doesn't find upgrades anymore.
			rm "$UP_LIST"; touch "$UP_LIST" ;;
		*)
			_ 'Leaving without any upgrades installed.'
			newline
			exit 0 ;;
	esac
fi
newline

README file for TazPkg developers
=================================


Desktop integration
-------------------

mimeapps.list: this file deprecated and not installed
https://wiki.archlinux.org/index.php/Default_applications
(Also, defaults.list deprecated.)

MIME-type "x-scheme-handler/tazpkg" already listed in the tazpkg-url.desktop


Categories for .desktop files are listed here:
http://standards.freedesktop.org/menu-spec/menu-spec-1.0.html

tazpanel-pkgs.desktop: sub-category PackageManager -> category Settings


TazPkg modules
--------------

About 4,000 lines of code is too big to effectively maintain in a single file.

Linux way [https://en.wikibooks.org/wiki/Linux_Guide/How_Linux_Works]:
> The Linux Way can be summarized as:
>   * Use programs that do only one task, but do it well.
>   * To accomplish complex tasks, use several programs linked together.
>   * Store information in human-readable plain text files whenever it is
>     possible.
>   * There is no "one true way" to do anything.
>   * Prefer commandline tools over graphical tools.

It is decided to split single tazpkg code into a few independent modules.

Goals: not to scroll thousands of lines to move back and forth to the internal
tazpkg functions and to the main tazpkg code; knowledge that single code
changing in the one place will not have side effects in the other place; reduce
the barrier to entry for new developers.


Best place to fit tazpkg modules is /usr/libexec directory.
http://www.linuxbase.org/betaspecs/fhs/fhs/ch04s07.html

> /usr/libexec includes internal binaries that are not intended to be executed
> directly by users or shell scripts. Applications may use a single subdirectory
> under /usr/libexec.

> Applications which use /usr/libexec in this way must not also use /usr/lib to
> store internal binaries, though they may use /usr/lib for the other purposes
> documented here.

So, the directory for tazpkg modules is /usr/libexec/tazpkg/.
It is out of the PATH, so modules will not interfere with original Linux
commands and will not autocomplete in the terminal. Nothing changed with the
user experience: it is still single tazpkg.


To execute module we need to know full path to the module.
We can use simple names for modules such as "help", "convert", "list", etc.


Directory variables
-------------------

Many programs can be configured using variables such as prefix, docdir, etc.:
  make prefix=/usr install

All variables are in lower case (only DESTDIR is in upper case). See more here:
https://www.gnu.org/prep/standards/html_node/Directory-Variables.html

Makefile contains variables support with default values.
Default prefix=/usr, all other variables are defaults to values described
at the given link.


Code commenting
---------------

Developer comments are very important to understand how the program works.
But these comments are useless to the end user and they just increase the size
of the scripts without making any changes to the script business logic. It also
increases the size of the scripts that includes shared "libs" such as libtaz.sh.

We can strip all the comments from installed scripts, leaving those comments
for developers in the SliTaz Hg repositories.

We need only to leave "#!/bin/sh" line and one or two lines of comments describing
what it is and where you can find the original scripts if you want to develop
them.


Tests
-----

Tests are the important part of the development process. TazPkg development is
not easy. We have no automated tests at the moment. Only we can do manual tests,
but even we have no check-list.

To test tazpkg effectively we need two sorts of the tests. One set of the tests
we can reproduce in the local file system (inside special prepared chroot
environment). For other tests we need a special test-server that provides special
+test cases (emulate package database changes), this also provides both main and few
+undigest repositories. We can set up special scripts and test repositories on the
existing server (cook.slitaz.org).


HTML terminal converter
-----------------------

In the module "help" was an attempt to write code that could easily display the
HTML-help in a terminal. The idea is to re-use TazPkg help files, which are
intended for display in the browser.

I'll tell you about the most interesting and complex part of the script that
starts like this:

    PRE=$(echo "$HLP" | sed ...

Here $HLP is a part of the HTML page that we are going to show. Next the chain
of sed commands are transformed in this HTML source in the next way.

  * `/^$/d;` remove blank lines;
  * `/<pre>/,/<\/pre\>/{s|.*|  &|; s| |·|g};` prepend lines within <pre>*</pre>
    tags with two unbreakable spaces, temporarily change spaces to middle dot;
  * `s|^  </*pre>$||; s|<pre>||; s|</pre>||;` remove "<pre>" tags;
  * `s|  ·#|  #|;` remove specified extra-space (converted to middle dot);
  * `tr '\n' ' '` convert all the newlines to spaces. Now we get one long line.
    Note that we already marked beginning of the pre-lines with two unbreakable
    spaces;
  * `s|[ 	][ 	]*| |g;` combine all the successive spaces and/or tabs into
    single space;
  * `s|[ 	]*<dl>|O\n|g;` change opening tag "<dl>" into "O<backspace>".
    Note, here and below I use "<backspace>" character because later I'll break
    long lines using function "longline()" from libtaz.sh, which in turn uses
    Busybox function "fold". In the final step sequences like "O<backspace>"
    will be changed to "invisible" color codes, and they should have "zero
    width" when they are processed by `fold` to break long lines in the right
    places. Fortunately, Busybox `fold` knows about "<backspace>" character and
    processes it correctly, so sequence like "O<backspace>" have "zero width"
    for `fold`;
  * `s|[ 	]*</dl>|L\n|g;` change closing tag "</dl>" into "L<backspace>";
  * `s|[ 	]*</*dt>||g;` remove opening and closing tags "<dt>";
  * `s|[ 	]*<dd>|	|g; s|</dd>|\n|g;` now lines within tags "<dd>" are
    prepended by tabulation;
  * `s|<h4>|<b>|g; s|</h4>|</b>\n|g` change header "<h4>" into separate line
    with code `<b>...</b>\n`;
  * `s|[ 	]*<p>[ 	]*||g;` remove opening tag "<p>" both with extra-space;
  * `s|[ 	]*</p>|\n \n|g;` remove closing tag "</p>" and append it with
    "<newline><single unbreakable space><newline>";
  * `s|  |\n  |g` prepend each line of the <pre> block (marked before with the
    double unbreakable spaces) with <newline>;
  * Now we have: individual lines prepended by two unbreakable spaces for <pre>
    block, individual lines for paragraphs, as well for content of "<dt>" tag,
    individual lines prepended by tabulation for content of "<dd>" tag,
    individual lines "O<backspace>" and "L<backspace>" for begin and end of the
    "<dl>" block;
  * `s|<a [^>]*>||g; s|</a>||g;` remove links, leaving only link text;
  * `s|·| |g` change back middle dots into spaces;
  * `s|</*nobr>||g; s|&shy;||g;` remove tags "<nobr>" and soft hyphens;
  * `s|^[ 	]*||` remove space in the beginning of each line;
  * `/^$/d` remove empty lines. Note, we already have line with the single
    unbreakable space as separator between paragraphs;
  * `s|<tt>|A|g; s|<code>|A|g;` change open tags to "A<backspace>"; in the
    final step it will be changed to the color code;
  * `s|<em>|B|g; s|<strong>|B|g;` other color code;
  * `s|</tt>|D|g; s|</code>|D|g; s|</em>|D|g;` here will be code that
    cancel previous color code;
  * `s|DD|D|g;` clean doubles.
